package leetcode;

/**

    You are given a string s consisting only of letters 'a' and 'b'. 
    In a single step you can remove one palindromic subsequence from s.

    Return the minimum number of steps to make the given string empty.

    A string is a subsequence of a given string if it is generated by deleting some characters of a given string 
    without changing its order. Note that a subsequence does not necessarily need to be contiguous.

    A string is called palindrome if is one that reads the same backward as well as forward.

    
    Example 1:

    Input: s = "ababa"
    Output: 1
    Explanation: s is already a palindrome, so its entirety can be removed in a single step.

 */

public class RemovePalindromicSubsequences {
    // Time: O(n)
    // remove palindromic subsequences
    public static int removePalindromicSubsequences (String s) {
        // init left to 0
        int left = 0;
        // init right to s length minus 1
        int right = s.length() - 1;

        // while left is less than right
        while (left < right) {
            // if s char at left is not equal to s char at right
            if (s.charAt(left) != s.charAt(right)) {
                // return 2
                return 2;
            }
            // increase left by 1
            left++;
            // decrease right by 1
            right--;
        }

        // return 1
        return 1;
    }


    // main
    public static void main(String[] args) {
        String s = "ababa";
        System.out.println(removePalindromicSubsequences(s));
    }
}
